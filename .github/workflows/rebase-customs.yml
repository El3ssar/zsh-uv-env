name: Rebase customs from upstream

on:
  schedule:
    - cron: "7 4 * * 1,4" # Mon & Thu 04:07 UTC
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

concurrency:
  group: rebase-${{ github.repository }}
  cancel-in-progress: false

jobs:
  rebase:
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ vars.REBASE_BRANCH || 'customs' }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve UPSTREAM (prefer repo var; else detect fork parent)
        id: resolve
        uses: actions/github-script@v7
        with:
          script: |
            const fromVar = process.env.UPSTREAM || (core.getInput('UPSTREAM') ?? '');
            if (fromVar) { core.setOutput('upstream', fromVar); return; }
            const parent = context.payload?.repository?.parent?.full_name;
            if (parent) { core.setOutput('upstream', parent); return; }
            // fallback: query API
            const { data } = await github.rest.repos.get(context.repo);
            if (data.parent?.full_name) core.setOutput('upstream', data.parent.full_name);
            else core.setFailed('No UPSTREAM set and no parent detected. Set a repo variable UPSTREAM=owner/repo.');

      - name: Get upstream default branch
        id: updef
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = '${{ steps.resolve.outputs.upstream }}'.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });
            core.setOutput('branch', data.default_branch);

      - name: Configure git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add/Update upstream remote
        run: |
          if git remote get-url upstream >/dev/null 2>&1; then
            git remote set-url upstream "https://github.com/${{ steps.resolve.outputs.upstream }}.git"
          else
            git remote add upstream "https://github.com/${{ steps.resolve.outputs.upstream }}.git"
          fi
          git fetch upstream --prune

      - name: Rebase ${{ env.BRANCH }} onto upstream/${{ steps.updef.outputs.branch }}
        id: rebase
        shell: bash
        run: |
          set -euo pipefail
          git checkout "${BRANCH}"
          BEFORE=$(git rev-parse HEAD)
          set +e
          git rebase "upstream/${{ steps.updef.outputs.branch }}"
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            git rebase --abort || true
            echo "conflict=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          AFTER=$(git rev-parse HEAD)
          if [ "$BEFORE" != "$AFTER" ]; then
            git push --force-with-lease origin "${BRANCH}"
            echo "updated=true" >> "$GITHUB_OUTPUT"
          else
            echo "updated=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Open issue on conflict
        if: steps.rebase.outputs.conflict == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Rebase failed: conflicts with upstream",
              body: [
                `Upstream: ${{ steps.resolve.outputs.upstream }}`,
                `Branch:   ${process.env.BRANCH}`,
                `Upstream default: ${{ steps.updef.outputs.branch }}`,
                "",
                "Action could not auto-rebase due to conflicts. Resolve locally:",
                "```bash",
                `git remote add upstream https://github.com/${{ steps.resolve.outputs.upstream }}.git`,
                `git fetch upstream`,
                `git checkout ${process.env.BRANCH}`,
                `git rebase upstream/${{ steps.updef.outputs.branch }}`,
                "```"
              ].join("\n")
            });
